# -*- coding: utf-8 -*-
"""LSTM2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/145mIs5L3VjwgmdrKrYqvYsYQDz9b74Za

**Simple LSTM for text classification**

Dataset Link:

https://www.kaggle.com/uciml/sms-spam-collection-dataset
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.models import Model
from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding
from keras.optimizers import RMSprop
from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping
# %matplotlib inline

# from google.colab import files
# uploaded = files.upload()

# import io
# df = pd.read_csv(io.BytesIO(uploaded['spam.csv']),delimiter=',',encoding='latin-1')
# print(df.head())

import io
df = pd.read_csv("/content/spam.csv",delimiter=',',encoding='latin-1')
print(df.head())

df.columns

# Drop the columns that are not required for the neural network.
df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],axis=1,inplace=True)
df.head()

df.columns

df.info()

# Understand the distribution better.
sns.countplot(df.v1)
plt.xlabel('Label')
plt.title('Number of ham and spam messages');

"""Create input and output vectors.

Process the labels.
"""

X = df.v2
X.head()

Y = df.v1
Y.head()

le = LabelEncoder()
Y = le.fit_transform(Y)
Y

Y.shape

Y = Y.reshape(-1,1)
Y.shape

Y

# Split into training and test data.
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.15)

X_train.shape

Y_train.shape

X_test.shape

Y_test.shape

"""**Process the data**

Tokenize the data and convert the text to sequences.

Add padding to ensure that all the sequences have the same shape.

There are many ways of taking the max_len and here an arbitrary length of 150 is chosen.
"""

# Top 1000 frequently occurring words
max_words = 1000

# Define the sequence lengths, max number of words and embedding dimensions
# Sequence length of each sentence. If more, truncate. If less, pad with zeros
max_len = 150


# https://keras.io/api/preprocessing/text/
# https://machinelearningmastery.com/prepare-text-data-deep-learning-keras/
tok = Tokenizer(num_words=max_words)
tok.fit_on_texts(X_train)
tok

# https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/text/Tokenizer
# Transforms each text in texts to a sequence of integers.
sequences = tok.texts_to_sequences(X_train)
sequences

# https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/sequence/pad_sequences
# https://stackoverflow.com/questions/42943291/what-does-keras-io-preprocessing-sequence-pad-sequences-do
sequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len)
sequences_matrix

"""**RNN**

Define the RNN structure.
"""

def RNN():
    i = Input(name='inputs',shape=[max_len])
    x = Embedding(max_words,50,input_length=max_len)(i)
    # https://keras.io/api/layers/core_layers/embedding/
    # https://machinelearningmastery.com/use-word-embedding-layers-deep-learning-keras/
    x = LSTM(64)(x)
    x = Dense(256,name='FC1')(x)
    x = Activation('relu')(x)
    x = Dropout(0.5)(x)
    x = Dense(1,name='out_layer')(x)
    x = Activation('sigmoid')(x)
    model = Model(inputs=i,outputs=x)
    return model

# Call the function and compile the model.
model = RNN()
model.summary()
model.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])

# Fit on the training data.
r = model.fit(sequences_matrix,Y_train,batch_size=128,epochs=10,
          validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.0001)])
# https://keras.io/api/callbacks/early_stopping/
# https://stackoverflow.com/questions/50284898/keras-earlystopping-which-min-delta-and-patience-to-use

# Plot loss per iteration
import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label='loss')
plt.plot(r.history['val_loss'], label='val_loss')
plt.legend()

# Plot accuracy per iteration
plt.plot(r.history['accuracy'], label='acc')
plt.plot(r.history['val_accuracy'], label='val_acc')
plt.legend()

"""The model performs well on the validation set and this configuration is chosen as the final model.

"""

# Process the test set data.
test_sequences = tok.texts_to_sequences(X_test)
test_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)

# Evaluate the model on the test set.
accr = model.evaluate(test_sequences_matrix,Y_test)

print('Test set\n  Loss: {:0.3f}\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))

"""**Happy Learning**

https://www.kaggle.com/shahules/zomato-complete-eda-and-lstm-model
"""